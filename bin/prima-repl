#!/usr/bin/env perl
use strict;
use warnings;

use Carp;
use File::Spec;
use FindBin;
use Getopt::Long qw( :config no_ignore_case pass_through );
use Pod::Usage;

BEGIN { # Run this before Prima tries to get X
    my @include_dirs;
    my @include_modules;
    GetOptions(
        'h|help' => \( my $help ),
        'I:s' => \@include_dirs,
        'M:s' => \@include_modules,
    );
    unshift @INC, $_ for @include_dirs, map { $1 if /^-I(.+)/ } @ARGV;
    for my $mod ( @include_modules, map { $1 if /^-M(.+)/ } @ARGV ) {
        my ( $module, $import ) = split /=/, $mod;
        my @import = $import ? ( split /,/, $import ) : ();
        # The jiggery-pokery of require $var/import is too much
        eval "use $module" . ( @import ? " qw(" . join( " ", @import ) . ");" : ";" );
        die $@ if $@;
    }
    @ARGV = grep { !/^-[IM]/ } @ARGV;
    pod2usage(0) if $help;
};

#use Eval::WithLexicals;

my $DEBUG_OUTPUT = 0;
my $initrc_filename = $ARGV[0] || 'prima-repl.initrc';
# Load PDL if they have it
my ($loaded_PDL, $loaded_Prima_Graphics);
BEGIN {
	$loaded_PDL = 0;
	eval {
		require PDL;
		PDL->import;
		require PDL::NiceSlice;
		$loaded_PDL = 1;
	};
	print $@ if $@ and $@ !~ /^Can't locate/;
	
	# Load PDL::Graphics::Prima if they have it
	$loaded_Prima_Graphics = 0;
	eval {
		require PDL::Graphics::Prima;
		PDL::Graphics::Prima->import;
		require PDL::Graphics::Prima::Simple;
		PDL::Graphics::Prima::Simple->import;
		$loaded_Prima_Graphics = 1;
	};
	print $@ if $@ and $@ !~ /^Can't locate/;

	# This function provides access to the original stdout file handle
	my $stdout = \*STDOUT;
	*REPL::print_to_terminal = sub {
		print $stdout @_;
	};
}

my $version = 0.3;

#########################
# Main Application Code #
#########################

use App::Prima::REPL;
use App::Prima::REPL::Commands;

my $repl = App::Prima::REPL->new( 
  default_help_page => $app_filename,
  has_PDL => $loaded_PDL,
  has_Prima_Graphics => $loaded_Prima_Graphics,
  debug_output => $DEBUG_OUTPUT,
);
my $commands = App::Prima::REPL::Commands->new( repl => $repl );

################################
# Output handling and mangling #
################################

# Set autoflush on stdout:
$|++;

# Useful function to simulate user input. This is useful for initialization
# scripts when you want to run commands and put them into the command history
sub REPL::simulate_run {
    my $self = shift;
    my $inline = $self->inline;

    my $command = shift;
    # Get the current content of the inline and cursor position:
    my $old_text = $inline->text;
    my $old_offset = $inline->charOffset;
    # Set the content to the new command:
    $inline->text($command);
    # run it:
    $inline->PressEnter();
    # put the original content back on the inline:
    $inline->text($old_text);
    $inline->charOffset($old_offset);
}

###############################
# Tie STDOUT to Output window #
###############################

use App::Prima::REPL::IO::OutWindow;

# Create the tied file handle that we will reassign
tie *PRINTOUT, 'App::Prima::REPL::IO::OutWindow' => $repl;
# Redirect standard output to the new tied file handle
select( *PRINTOUT );

############################################
# Tie STDERR to Output window and terminal #
############################################

# Create the tied file handle
tie *ERROUT, 'App::Prima::REPL::IO::OutWindow::Err' => $repl;
# Tie stderr to the new tied file handle
*main::STDERR = \*ERROUT;

######################################
# A custom inputHistory Output class #
######################################

package PrimaX::InputHistory::Output::REPL;
# Thanks to the tied output, I can simply "print" results and they will
# go to the output widget
sub printout {
	my $self = shift;
	print @_;
}
sub newline_printout {
	my $self = shift;
	print "\n" if $self->{repl}->output_column != 0;
	print @_;
}
sub new { 
  my $class = shift;
  return bless { repl => shift || die }, $class; 
}

###############
# Final items #
###############

package main;

eval 'require PDL::Version' if not defined $PDL::Version::VERSION;

# Print the opening message:
print "Welcome to the Prima REPL, version $version.\n";
print "Using PDL version $PDL::Version::VERSION\n" if ($loaded_PDL);
print "Using PDL::Graphics::Prima\n" if ($loaded_Prima_Graphics);
print "\n";
print join(' ', "If you don't know what you're doing, you can get help by"
				, "typing 'help' and pressing Enter, or by pressing Ctrl-h.\n");


#################################
# Run any initialization script #
#################################
sub redo_initrc {
	my $filename = $initrc_filename if -f $initrc_filename;
	$filename = "$initrc_filename.pl" if -f "$initrc_filename.pl";
	if ($filename) {
		print "Running initialization script\n";
		# Load the init script and send it to 
		open my $fh, '<', $filename;
		my $text = do { local( $/ ) ; <$fh> };
		my_eval("#line 1 \"$filename\"\n$text");
		REPL::warn("Errors encountered running the initialization script:\n$@\n")
			if $@;
		$@ = '';
	}
	else {
		print "No initialization script found\n";
	}
}
redo_initrc if -f $initrc_filename or -f "$initrc_filename.pl";

run Prima;
# Remove the logfile. This will not happen with a system failure, which means
# that the logfile is 'saved' only when there was a problem. The special case of
# the user typing 'exit' at the prompt is handled in pressed_enter().
unlink 'prima-repl.logfile';

__END__

=head1 NAME

prima-repl - A Perl REPL using Prima

=head1 SYNOPSIS

    prima-repl [-I <lib_dir>] [-M <module>] [<init_file>]
    prima-repl -h

=head1 DESCRIPTION

Open a Prima REPL window.

=head1 ARGUMENTS

=head2 init_file

Specify the name of a Perl file to run to initialize the REPL window. This file can open
new tabs, add widgets, or more. See L<App::Prima::REPL::Help> "RC File and notes".

=head1 OPTIONS

=head2 -I <lib_directory>

Add a directory to find modules in.

=head2 -M <module>

Load a module at startup. Imports can be added using MyMod=foo,bar,baz to import the
symbols "foo", "bar", and "baz" from the module MyMod.

=head2 -h|--help

Show this help file.

=head1 SEE ALSO

=over 4

=item L<App::Prima::REPL::Help>

=back

=head1 Author, Repository

This program is Copyright David Mertens, 2011, 2012. It is distributed
under the same terms as Perl itself.

The latest copy of this project should be available on Github at
L<https://github.com/run4flat/App-Prima-REPL>.

=cut
